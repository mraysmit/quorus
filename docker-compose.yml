version: '3.8'

# Quorus Controller Cluster for Testing
# This configuration sets up a 3-node Raft cluster for integration testing

services:
  controller1:
    build:
      context: .
      dockerfile: quorus-controller/Dockerfile
    container_name: quorus-controller1
    hostname: controller1
    environment:
      - NODE_ID=controller1
      - RAFT_HOST=0.0.0.0
      - RAFT_PORT=8080
      - CLUSTER_NODES=controller1=controller1:8080,controller2=controller2:8080,controller3=controller3:8080
      - ELECTION_TIMEOUT_MS=3000
      - HEARTBEAT_INTERVAL_MS=500
      - JAVA_OPTS=-Xmx256m -Xms128m
    ports:
      - "8081:8080"
    networks:
      raft-cluster:
        ipv4_address: 172.20.0.10
    volumes:
      - controller1-data:/app/data
      - controller1-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  controller2:
    build:
      context: .
      dockerfile: quorus-controller/Dockerfile
    container_name: quorus-controller2
    hostname: controller2
    environment:
      - NODE_ID=controller2
      - RAFT_HOST=0.0.0.0
      - RAFT_PORT=8080
      - CLUSTER_NODES=controller1=controller1:8080,controller2=controller2:8080,controller3=controller3:8080
      - ELECTION_TIMEOUT_MS=3000
      - HEARTBEAT_INTERVAL_MS=500
      - JAVA_OPTS=-Xmx256m -Xms128m
    ports:
      - "8082:8080"
    networks:
      raft-cluster:
        ipv4_address: 172.20.0.11
    volumes:
      - controller2-data:/app/data
      - controller2-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    depends_on:
      - controller1

  controller3:
    build:
      context: .
      dockerfile: quorus-controller/Dockerfile
    container_name: quorus-controller3
    hostname: controller3
    environment:
      - NODE_ID=controller3
      - RAFT_HOST=0.0.0.0
      - RAFT_PORT=8080
      - CLUSTER_NODES=controller1=controller1:8080,controller2=controller2:8080,controller3=controller3:8080
      - ELECTION_TIMEOUT_MS=3000
      - HEARTBEAT_INTERVAL_MS=500
      - JAVA_OPTS=-Xmx256m -Xms128m
    ports:
      - "8083:8080"
    networks:
      raft-cluster:
        ipv4_address: 172.20.0.12
    volumes:
      - controller3-data:/app/data
      - controller3-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    depends_on:
      - controller1
      - controller2

networks:
  # Primary cluster network for normal operations
  raft-cluster:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: raft-cluster-br
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: 1500

  # Secondary network for partition testing
  raft-partition-a:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
    driver_opts:
      com.docker.network.bridge.name: raft-partition-a-br
      com.docker.network.bridge.enable_icc: "true"

  # Third network for complex partition scenarios
  raft-partition-b:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/16
          gateway: 172.22.0.1
    driver_opts:
      com.docker.network.bridge.name: raft-partition-b-br
      com.docker.network.bridge.enable_icc: "true"

volumes:
  controller1-data:
    driver: local
  controller1-logs:
    driver: local
  controller2-data:
    driver: local
  controller2-logs:
    driver: local
  controller3-data:
    driver: local
  controller3-logs:
    driver: local
